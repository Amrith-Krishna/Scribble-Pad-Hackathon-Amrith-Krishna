{
  "metadata": {
    "name": "Nv11",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Game</title>\n    <style>\n        body {\n            position: relative;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            margin: 0;\n            background-color: #f0f0f0;\n            font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\n        }\n        canvas {\n            border: 2px solid #333;\n            background-color: #87ceeb;\n        }\n    </style>\n</head>\n<body>\n    <canvas id = \"gameCanvas\" width = \"600\" height = \"400\"></canvas>\n    <button id = \"button\">LOADING...</button>\n    <style>\n        button{\n            position: relative;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            width: 120px;\n            height: 40px;\n            padding: 30px 10px;\n            margin: 0% 220px;\n            border: 2px solid #000000;\n            box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.19);\n            border-radius: 20px;\n            background-color: #FFE5B4 ;\n            font-family: 'Times New Roman', sans-serif;\n            font-weight: 500;\n            font-size: larger;\n        }\n    </style>\n</body>\n</html>",
      "status": "",
      "output": "\n\n\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Game</title>\n    <style>\n        body {\n            position: relative;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            margin: 0;\n            background-color: #f0f0f0;\n            font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\n        }\n        canvas {\n            border: 2px solid #333;\n            background-color: #87ceeb;\n        }\n    </style>\n\n\n    <canvas id=\"gameCanvas\" width=\"600\" height=\"400\"></canvas>\n    <button id=\"button\" style=\"background: rgb(255, 127, 0);\">START</button>\n    <style>\n        button{\n            position: relative;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            width: 120px;\n            height: 40px;\n            padding: 30px 10px;\n            margin: 0% 220px;\n            border: 2px solid #000000;\n            box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.19);\n            border-radius: 20px;\n            background-color: #FFE5B4 ;\n            font-family: 'Times New Roman', sans-serif;\n            font-weight: 500;\n            font-size: larger;\n        }\n    </style>\n\n",
      "type": "html"
    },
    {
      "code": "await import(\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs\")\nawait import(\"https://cdn.jsdelivr.net/npm/@tensorflow-models/handpose\")\nawait import(\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-webgl\")\n\nconst video = document.createElement('video');\nconst canvas = document.getElementById('gameCanvas');\nconst ctx = canvas.getContext('2d');\nconst start = document.getElementById('button');\n\nlet model, handData;\nlet objectX = canvas.width / 2;\nlet objectY = canvas.height / 2;\n\n\n// Player Character attributes\nconst character = {\n    x: 50,\n    y: canvas.height - 60,\n    width: 40,\n    height: 40,\n    color: \"#ff6347\",\n    speed: 5,\n    jumpStrength: 20,\n    isJumping: false,\n    dy: 0\n};\n\n// Obstacle attributes\nconst obstacle = {\n    x: canvas.width,\n    y: canvas.height - 40,\n    width: 40,\n    height: 40,\n    color: \"#333\",\n    speed: canvas.width/100,\n  \tspeedmult: 1.0\n};\n\n// Game status\nlet score = 0;\nlet gameRunning = true;\n\n// Web-cam access\n// Edit -> Trust NB\nasync function startVideo() {\n    const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n    video.srcObject = stream;\n    video.play();\n}\n\n// Sets up the Hand gesture detection model\nasync function initmodel() {\n    model = await handpose.load();\n    startVideo();\n    detectHands();\n    window.alert(\"Webcam access received, Ready to play\");\n    start.innerText = \"START\";\n    start.style.background = \"#ff7f00\";\n    start.addEventListener('click', () =>{\n\t  start.innerText = \"RESTART\";\n\t  start.style.background = \"#FFBE54\";\n\t  init();\n\t});\n}\n\n// Utility function\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n// Calls the hand gesture detector\nasync function detectHands() {\n    if (video.readyState === video.HAVE_ENOUGH_DATA) {\n        handData = await model.estimateHands(video);\n    }\n    requestAnimationFrame(detectHands);\n}\n\n// Updates the hand position information\nfunction updatePosition() {\n    if (handData && handData.length > 0) {\n\t  // Reference point is tip of index finger\n        const indexFinger = handData[0].landmarks[8];\n        objectX = (indexFinger[0] / video.videoWidth) * canvas.width;\n        objectX = canvas.width - objectX;\n        objectY = (indexFinger[1] / video.videoHeight) * canvas.height;\n    }\n}\n\n//Initialize player, score and obstacles\nfunction init() {\n    objectX = canvas.width / 2;\n    objectY = canvas.height / 2;\n    character.x = 50;\n    character.y = canvas.height - 60;\n    character.isJumping = false;\n    character.dy = 0;\n    score = 0;\n    obstacle.x = canvas.width;\n    obstacle.y = canvas.height - 40;\n    obstacle.width = 40;\n    obstacle.height = 40;\n    obstacle.speed = canvas.width/100;\n  \tobstacle.speedmult = 1.0;\n    gameRunning = true;\n    gameLoop();\n}\n\n// Game loop\nfunction gameLoop() {\n    if (gameRunning) {\n        updatePosition();\n        update();\n        draw();\n        requestAnimationFrame(gameLoop);\n    } else {\n        ctx.fillStyle = \"black\";\n        ctx.font = \"30px Times New Roman\";\n        ctx.fillText(\"Game Over! Score: \" + score, canvas.width / 4, canvas.height / 2);\n\t  \tstart.style.background = \"#FF7F00\";\n\t  \tstart.innerText = \"START\";\n    }\n}\n\n\n// Update game objects\nfunction update() {\n    // Character movement based on hand position\n    // Upper half -> jump\n  \t// Left -> move left\n    // Right -> move right\n    if (objectX < canvas.width/2 && character.x > 0) character.x -= character.speed * Math.min(1.0,2*objectX/canvas.height);\n    if (objectX >= canvas.width/2 && character.x + character.width < canvas.width) character.x += character.speed * Math.min(1.0,2*objectX/canvas.height);\n    if (objectY < canvas.height/2 && !character.isJumping) {\n        character.isJumping = true;\n        character.dy = -character.jumpStrength;\n    }\n\n    // Gravity\n    character.dy += 1;\n    character.y += character.dy;\n    if (character.y + character.height > canvas.height - 10) {\n        character.y = canvas.height - 60;\n        character.isJumping = false;\n        character.dy = 0;\n    }\n\n    // Move obstacle\n    obstacle.x -= obstacle.speed;\n    if (obstacle.x < 0) {\n        obstacle.x = canvas.width;\n        obstacle.width = Math.floor(1.1*score) + randomInt(30,50);\n        obstacle.height = Math.floor(1.2*score) + randomInt(30,45);\n        obstacle.y = canvas.height - obstacle.height;\n\n        score += 1; \n\t  // Increment score each time obstacle is avoided\n        obstacle.speed *= 1.03; \n\t  \tobstacle.speedmult *= 1.03;\n\t  // Gradually increase speed for difficulty\n    }\n\n    // Check collision\n    if (detectCollision(character, obstacle)) {\n        gameRunning = false;\n    }\n}\n\n// Draw game objects\nfunction draw() {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Draw character\n    ctx.fillStyle = character.color;\n    ctx.fillRect(character.x, character.y, character.width, character.height);\n\n    // Draw obstacle\n    ctx.fillStyle = obstacle.color;\n    ctx.fillRect(obstacle.x, obstacle.y, obstacle.width, obstacle.height);\n\n    // Draw axes for the player's convenience\n    ctx.fillStyle = \"#000000\";\n    ctx.fillRect(canvas.width/2, 0, 1, canvas.height);\n    ctx.fillRect(0, canvas.height/2, canvas.width, 1);\n\n    // Draw score\n    ctx.fillStyle = \"#333\";\n    ctx.font = \"bold 20px Times New Roman\";\n    ctx.fillText(\"Score: \" + score, 10, 30);\n  \tctx.fillText(\"Speed: \" + Math.round(obstacle.speedmult*100)/100, 10, 60);\n    ctx.beginPath();\n    ctx.arc(objectX, objectY, 5, 0, Math.PI * 2);\n    ctx.fillStyle = \"red\";\n    ctx.fill();\n    ctx.closePath();\n    requestAnimationFrame(draw);\n}\n\n// Collision detection between obstacles and player\nfunction detectCollision(rect1, rect2) {\n    return (\n        rect1.x < rect2.x + rect2.width &&\n        rect1.x + rect1.width > rect2.x &&\n        rect1.y < rect2.y + rect2.height &&\n        rect1.y + rect1.height > rect2.y\n    );\n}\n\n// Start the game\ninitmodel();",
      "status": "[1]<br><span style=\"font-size:8px\">184ms<span></span></span>",
      "output": "",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": false
}